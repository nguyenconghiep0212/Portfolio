var ze=Object.defineProperty;var Se=(R,t,e)=>t in R?ze(R,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):R[t]=e;var W=(R,t,e)=>(Se(R,typeof t!="symbol"?t+"":t,e),e);import{J as Ae,a6 as It,$ as Ft,v as Tt,F as K,b1 as Me,m as _t,ai as Rt,x as Ne,ad as Ut,Q as Be,g as Pe,E as Ie,S as Fe,W as Te,f as _e,aa as Re,au as qe,b2 as Le,a2 as qt,D as ke,b as Oe,a as je}from"./three.module.890a6b73.js";import{S as Ve}from"./stats.module.d9d9bf33.js";import{b as We,r as Xt,p as Ge,ak as He,j as De,g as $t,h as Ye,w as Ue,f as Xe,o as $e,R as Ke}from"./vendor.289a3f5a.js";class Z{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Z);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],l=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],v=n[0],y=n[1],w=n[2],m=n[3],b=n[4],E=n[5],z=n[6],A=n[7],T=n[8];return i[0]=o*v+r*m+a*z,i[1]=o*y+r*b+a*A,i[2]=o*w+r*E+a*T,i[3]=l*v+d*m+u*z,i[4]=l*y+d*b+u*A,i[5]=l*w+d*E+u*T,i[6]=h*v+f*m+p*z,i[7]=h*y+f*b+p*A,i[8]=h*w+f*E+p*T,e}scale(t,e){e===void 0&&(e=new Z);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const l=a;let d;const u=4;let h;do{if(o=l-a,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Z);const e=3,s=6,n=Ze;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let l;const d=s;let u;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,l=e*o,d=e*r,u=e*a,h=s*r,f=s*a,p=n*a,v=i*o,y=i*r,w=i*a,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+y,m[3*1+0]=d+w,m[3*1+1]=1-(l+p),m[3*1+2]=f-v,m[3*2+0]=u-y,m[3*2+1]=f+v,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new Z);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const Ze=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Je,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Qe;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(Kt),Kt.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const Je=new c,Qe=new c,Kt=new c;class ${constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,Zt),l=Zt),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new $().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),a.copy(d)}toLocalFrame(t,e){const s=Jt,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Jt,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,a),Math.min(l,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,d)),Math.max(u,h));return!(p<0||f>p)}}const Zt=new c,Jt=[new c,new c,new c,new c,new c,new c,new c,new c];class Qt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class te{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=ts,n=es;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*a,e.y=n*d+o*a+i*r-s*l,e.z=i*d+o*l+s*a-n*r,e.w=o*d-s*r-n*a-i*l,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,l=this.w,d=l*s+r*i-a*n,u=l*n+a*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-a*i;return e.x=d*l+f*-o+u*-a-h*-r,e.y=u*l+f*-r+h*-o-d*-a,e.z=h*l+f*-a+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const d=o*r+a*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*a,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="YXZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="ZXY"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="ZYX"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="YZX"?(this.x=a*o*r+i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r-a*l*d):n==="XZY"&&(this.x=a*o*r-i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r+a*l*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,l=t.y,d=t.z,u=t.w,h,f,p,v,y;return f=n*a+i*l+o*d+r*u,f<0&&(f=-f,a=-a,l=-l,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),v=Math.sin((1-e)*h)/p,y=Math.sin(e*h)/p):(v=1-e,y=e),s.x=v*n+y*a,s.y=v*i+y*l,s.z=v*o+y*d,s.w=v*r+y*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*a-i*d),n.z+=h*(r*u+i*l-o*a),n.w+=h*(-i*a-o*l-r*d),n}}const ts=new c,es=new c,ss={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class F{constructor(t){t===void 0&&(t={}),this.id=F.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}F.idCounter=0;F.types=ss;class j{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return j.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return j.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(ee),ee.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const ee=new G;class pt extends F{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:F.types.CONVEXPOLYHEDRON});this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[o[a]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];pt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,l){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const v=d.dot(o);v>h&&(h=v,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const v=s.vertices[s.faces[u][p]],y=new c;y.copy(v),i.vmult(y,y),n.vadd(y,y),f.push(y)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,a,l)}findSeparatingAxis(t,e,s,n,i,o,r,a){const l=new c,d=new c,u=new c,h=new c,f=new c,p=new c;let v=Number.MAX_VALUE;const y=this;if(y.uniqueAxes)for(let w=0;w!==y.uniqueAxes.length;w++){s.vmult(y.uniqueAxes[w],l);const m=y.testSepAxis(l,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(l))}else{const w=r?r.length:y.faces.length;for(let m=0;m<w;m++){const b=r?r[m]:m;l.copy(y.faceNormals[b]),s.vmult(l,l);const E=y.testSepAxis(l,t,e,s,n,i);if(E===!1)return!1;E<v&&(v=E,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=y.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<v&&(v=m,o.copy(d))}else{const w=a?a.length:t.faces.length;for(let m=0;m<w;m++){const b=a?a[m]:m;d.copy(t.faceNormals[b]),i.vmult(d,d);const E=y.testSepAxis(d,t,e,s,n,i);if(E===!1)return!1;E<v&&(v=E,o.copy(d))}}for(let w=0;w!==y.uniqueEdges.length;w++){s.vmult(y.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const b=y.testSepAxis(p,t,e,s,n,i);if(b===!1)return!1;b<v&&(v=b,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;pt.project(r,t,s,n,Lt),pt.project(e,t,i,o,kt);const a=Lt[0],l=Lt[1],d=kt[0],u=kt[1];if(a<u||d<l)return!1;const h=a-u,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new c,l=new c,d=new c,u=new c,h=new c,f=new c,p=new c,v=new c,y=this,w=[],m=n,b=w;let E=-1,z=Number.MAX_VALUE;for(let B=0;B<y.faces.length;B++){a.copy(y.faceNormals[B]),s.vmult(a,a);const I=a.dot(t);I<z&&(z=I,E=B)}if(E<0)return;const A=y.faces[E];A.connectedFaces=[];for(let B=0;B<y.faces.length;B++)for(let I=0;I<y.faces[B].length;I++)A.indexOf(y.faces[B][I])!==-1&&B!==E&&A.connectedFaces.indexOf(B)===-1&&A.connectedFaces.push(B);const T=A.length;for(let B=0;B<T;B++){const I=y.vertices[A[B]],P=y.vertices[A[(B+1)%T]];I.vsub(P,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[E]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(I),s.vmult(f,f),e.vadd(f,f);const x=A.connectedFaces[B];p.copy(this.faceNormals[x]);const N=this.getPlaneConstantOfFace(x);v.copy(p),s.vmult(v,v);const M=N-v.dot(e);for(this.clipFaceAgainstPlane(m,b,v,M);m.length;)m.shift();for(;b.length;)m.push(b.shift())}p.copy(this.faceNormals[E]);const C=this.getPlaneConstantOfFace(E);v.copy(p),s.vmult(v,v);const S=C-v.dot(e);for(let B=0;B<m.length;B++){let I=v.dot(m[B])+S;if(I<=i&&(console.log(`clamped: depth=${I} to minDist=${i}`),I=i),I<=o){const P=m[B];if(I<=1e-6){const x={point:P,normal:v,depth:I};r.push(x)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];i=s.dot(a)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new c;u.copy(l),e.push(u)}else{const u=new c;a.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new c;a.lerp(l,i/(i-o),u),e.push(u),e.push(l)}a=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,l,d,u,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(a===void 0||p.z<a)&&(a=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,a),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new c;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let a=n[r];const l=e[s[r][0]],d=new c;t.vsub(l,d);const u=a.dot(d),h=new c;o.vsub(l,h);const f=a.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ns;let a=0,l=0;const d=is,u=t.vertices;d.setZero(),j.vectorToLocalFrame(s,n,e,r),j.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=a=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>a&&(a=p),p<l&&(l=p)}if(l-=h,a-=h,l>a){const f=l;l=a,a=f}i[0]=a,i[1]=l}}const Lt=[],kt=[];new c;const ns=new c,is=new c;class bt extends F{constructor(t){super({type:F.types.BOX});this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new pt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),bt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ct.set(i[o][0],i[o][1],i[o][2]),e.vmult(ct,ct),t.vadd(ct,ct),s(ct.x,ct.y,ct.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Q[0].set(i.x,i.y,i.z),Q[1].set(-i.x,i.y,i.z),Q[2].set(-i.x,-i.y,i.z),Q[3].set(-i.x,-i.y,-i.z),Q[4].set(i.x,-i.y,-i.z),Q[5].set(i.x,i.y,-i.z),Q[6].set(-i.x,i.y,-i.z),Q[7].set(i.x,-i.y,i.z);const o=Q[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=Q[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,d=a.y,u=a.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ct=new c,Q=[new c,new c,new c,new c,new c,new c,new c,new c],Ot={DYNAMIC:1,STATIC:2,KINEMATIC:4},jt={AWAKE:0,SLEEPY:1,SLEEPING:2};class _ extends te{constructor(t){t===void 0&&(t={});super();this.id=_.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?_.STATIC:_.DYNAMIC,typeof t.type==typeof _.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep!="undefined"?t.allowSleep:!0,this.sleepState=_.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit!="undefined"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit!="undefined"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation!="undefined"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping!="undefined"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new $,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=_.AWAKE,this.wakeUpAfterNarrowphase=!1,t===_.SLEEPING&&this.dispatchEvent(_.wakeupEvent)}sleep(){this.sleepState=_.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===_.AWAKE&&s<n?(this.sleepState=_.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(_.sleepyEvent)):e===_.SLEEPY&&s>n?this.wakeUp():e===_.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(_.sleepEvent))}}updateSolveMassProperties(){this.sleepState===_.SLEEPING||this.type===_.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=os,o=rs,r=this.quaternion,a=this.aabb,l=cs;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=as,n=ls;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==_.DYNAMIC)return;this.sleepState===_.SLEEPING&&this.wakeUp();const s=ds;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==_.DYNAMIC)return;const s=us,n=ps;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===_.DYNAMIC&&(this.sleepState===_.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==_.DYNAMIC)return;this.sleepState===_.SLEEPING&&this.wakeUp();const s=e,n=fs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=ms;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==_.DYNAMIC)return;const s=vs,n=ys;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=ws;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),bt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===_.DYNAMIC||this.type===_.KINEMATIC)||this.sleepState===_.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,v=this.angularFactor,y=a.x*v.x,w=a.y*v.y,m=a.z*v.z;i.x+=t*(p[0]*y+p[1]*w+p[2]*m),i.y+=t*(p[3]*y+p[4]*w+p[5]*m),i.z+=t*(p[6]*y+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}_.idCounter=0;_.COLLIDE_EVENT_NAME="collide";_.DYNAMIC=Ot.DYNAMIC;_.STATIC=Ot.STATIC;_.KINEMATIC=Ot.KINEMATIC;_.AWAKE=jt.AWAKE;_.SLEEPY=jt.SLEEPY;_.SLEEPING=jt.SLEEPING;_.wakeupEvent={type:"wakeup"};_.sleepyEvent={type:"sleepy"};_.sleepEvent={type:"sleep"};const os=new c,rs=new G,cs=new $,as=new Z,ls=new Z,hs=new Z,ds=new c,us=new c,ps=new c,fs=new c,ms=new c,vs=new c,ys=new c,ws=new c;class xs{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)==0||(e.collisionFilterGroup&t.collisionFilterMask)==0||((t.type&_.STATIC)!=0||t.sleepState===_.SLEEPING)&&((e.type&_.STATIC)!=0||e.sleepState===_.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=gs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=bs,n=Es,i=Cs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,l=i[r].id,d=a<l?`${a},${l}`:`${l},${a}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(n[l]),e.push(i[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const gs=new c;new c;new G;new c;const bs={keys:[]},Es=[],Cs=[];new c;new c;new c;class zs extends xs{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let l=0;l!==a;l++)o=n[a],r=n[l],!!this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Et{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let se,ne,ie,oe,re,ce,ae;const Vt={CLOSEST:1,ANY:2,ALL:4};se=F.types.SPHERE;ne=F.types.PLANE;ie=F.types.BOX;oe=F.types.CYLINDER;re=F.types.CONVEXPOLYHEDRON;ce=F.types.HEIGHTFIELD;ae=F.types.TRIMESH;class H{get[se](){return this._intersectSphere}get[ne](){return this._intersectPlane}get[ie](){return this._intersectBox}get[oe](){return this._intersectConvex}get[re](){return this._intersectConvex}get[ce](){return this._intersectHeightfield}get[ae](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new Et,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new Et,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask!="undefined"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup!="undefined"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse!="undefined"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(le),Wt.length=0,t.broadphase.aabbQuery(t,le,Wt),this.intersectBodies(Wt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)==0||(t.collisionFilterGroup&this.collisionFilterMask)==0)return;const n=Ss,i=As;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(js(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,l=new c(0,0,1);e.vmult(l,l);const d=new c;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const f=l.dot(a);if(Math.abs(f)<this.precision)return;const p=new c,v=new c,y=new c;o.vsub(s,p);const w=-l.dot(p)/f;a.scale(w,v),o.vadd(v,y),this.reportIntersection(l,y,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ms;o.from.copy(this.from),o.to.copy(this.to),j.pointToLocalFrame(s,e,o.from,o.from),j.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Ns;let a,l,d,u;a=l=0,d=u=t.data.length-1;const h=new $;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=a;f<d;f++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),j.pointToWorldFrame(s,e,t.pillarOffset,Ct),this._intersectConvex(t.pillarConvex,e,Ct,n,i,he),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),j.pointToWorldFrame(s,e,t.pillarOffset,Ct),this._intersectConvex(t.pillarConvex,e,Ct,n,i,he)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=d**2-4*l*u,f=Bs,p=Ps;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const v=(-d-Math.sqrt(h))/(2*l),y=(-d+Math.sqrt(h))/(2*l);if(v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Is,a=de,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,v=this.to,y=p.distanceTo(v),w=l?l.length:d.length,m=this.result;for(let b=0;!m.shouldStop&&b<w;b++){const E=l?l[b]:b,z=d[E],A=h[E],T=e,C=s;a.copy(u[z[0]]),T.vmult(a,a),a.vadd(C,a),a.vsub(p,a),T.vmult(A,r);const S=f.dot(r);if(Math.abs(S)<this.precision)continue;const B=r.dot(a)/S;if(!(B<0)){f.scale(B,X),X.vadd(p,X),J.copy(u[z[0]]),T.vmult(J,J),C.vadd(J,J);for(let I=1;!m.shouldStop&&I<z.length-1;I++){tt.copy(u[z[I]]),et.copy(u[z[I+1]]),T.vmult(tt,tt),T.vmult(et,et),C.vadd(tt,tt),C.vadd(et,et);const P=X.distanceTo(p);!(H.pointInTriangle(X,J,tt,et)||H.pointInTriangle(X,tt,J,et))||P>y||this.reportIntersection(r,X,i,n,E)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Fs,a=ks,l=Os,d=de,u=Ts,h=_s,f=Rs,p=Ls,v=qs,y=t.indices;t.vertices;const w=this.from,m=this.to,b=this.direction;l.position.copy(s),l.quaternion.copy(e),j.vectorToLocalFrame(s,e,b,u),j.pointToLocalFrame(s,e,w,h),j.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const E=h.distanceSquared(f);t.tree.rayQuery(this,l,a);for(let z=0,A=a.length;!this.result.shouldStop&&z!==A;z++){const T=a[z];t.getNormal(T,r),t.getVertex(y[T*3],J),J.vsub(h,d);const C=u.dot(r),S=r.dot(d)/C;if(S<0)continue;u.scale(S,X),X.vadd(h,X),t.getVertex(y[T*3+1],tt),t.getVertex(y[T*3+2],et);const B=X.distanceSquared(h);!(H.pointInTriangle(X,tt,J,et)||H.pointInTriangle(X,J,tt,et))||B>E||(j.vectorToWorldFrame(e,r,v),j.pointToWorldFrame(s,e,X,p),this.reportIntersection(v,p,i,n,T))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i!="undefined"?i:-1,this.mode){case H.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,a),l.hasHit=!0,this.callback(l);break;case H.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a));break;case H.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,at),s.vsub(e,ft),t.vsub(e,Gt);const i=at.dot(at),o=at.dot(ft),r=at.dot(Gt),a=ft.dot(ft),l=ft.dot(Gt);let d,u;return(d=a*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*a-o*o}}H.CLOSEST=Vt.CLOSEST;H.ANY=Vt.ANY;H.ALL=Vt.ALL;const le=new $,Wt=[],ft=new c,Gt=new c,Ss=new c,As=new G,X=new c,J=new c,tt=new c,et=new c;new c;new Et;const he={faceList:[0]},Ct=new c,Ms=new H,Ns=[],Bs=new c,Ps=new c,Is=new c;new c;new c;const de=new c,Fs=new c,Ts=new c,_s=new c,Rs=new c,qs=new c,Ls=new c;new $;const ks=[],Os=new j,at=new c,zt=new c;function js(R,t,e){e.vsub(R,at);const s=at.dot(t);return t.scale(s,zt),zt.vadd(R,zt),e.distanceTo(zt)}class Vs{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ue{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class mt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=mt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ue,this.jacobianElementB=new ue,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,pe),r.scale(d,fe),s.invInertiaWorldSolve.vmult(o,me),n.invInertiaWorldSolve.vmult(a,ve),t.multiplyVectors(pe,me)+e.multiplyVectors(fe,ve)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,St),l+=St.dot(t.rotational),a.vmult(e.rotational,St),l+=St.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Ws;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}mt.idCounter=0;const pe=new c,fe=new c,me=new c,ve=new c,St=new c,Ws=new c;class Gs extends mt{constructor(t,e,s){s===void 0&&(s=1e6);super(t,e,0,s);this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=Hs,l=Ds,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Ys,v=this.jacobianElementA,y=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(v.spatial),a.negate(v.rotational),y.spatial.copy(w),y.rotational.copy(l),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),b=this.restitution+1,E=b*h.dot(w)-b*d.dot(w)+f.dot(l)-u.dot(a),z=this.computeGiMf();return-m*e-E*s-t*z}getImpactVelocityAlongNormal(){const t=Us,e=Xs,s=$s,n=Ks,i=Zs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Hs=new c,Ds=new c,Ys=new c,Us=new c,Xs=new c,$s=new c,Ks=new c,Zs=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class ye extends mt{constructor(t,e,s){super(t,e,-s,s);this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Js,o=Qs,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Js=new c,Qs=new c;class At{constructor(t,e,s){s=Vs.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=At.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}At.idCounter=0;class vt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=vt.idCounter++,this.friction=typeof t.friction!="undefined"?t.friction:-1,this.restitution=typeof t.restitution!="undefined"?t.restitution:-1}}vt.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new H;new c;new c;new c;new c(1,0,0),new c(0,1,0),new c(0,0,1);new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class we extends F{constructor(t){super({type:F.types.SPHERE});if(this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const a=o[r];s[a]=t[a]-i,n[a]=t[a]+i}}}new c;new c;new c;new c;new c;new c;new c;new c;new c;class tn extends F{constructor(){super({type:F.types.PLANE});this.worldNormal=new c,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new c),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){st.set(0,0,1),e.vmult(st,st);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),st.x===1?n.x=t.x:st.x===-1&&(s.x=t.x),st.y===1?n.y=t.y:st.y===-1&&(s.y=t.y),st.z===1?n.z=t.z:st.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const st=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new $;new c;new $;new c;new c;new c;new c;new c;new c;new c;new $;new c;new j;new $;class en{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class sn extends en{constructor(){super();this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,d=t;let u,h,f,p,v,y;if(r!==0)for(let E=0;E!==l;E++)a[E].updateSolveMassProperties();const w=on,m=rn,b=nn;w.length=r,m.length=r,b.length=r;for(let E=0;E!==r;E++){const z=o[E];b[E]=0,m[E]=z.computeB(d),w[E]=1/z.computeC()}if(r!==0){for(let A=0;A!==l;A++){const T=a[A],C=T.vlambda,S=T.wlambda;C.set(0,0,0),S.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let A=0;A!==r;A++){const T=o[A];u=m[A],h=w[A],y=b[A],v=T.computeGWlambda(),f=h*(u-v-T.eps*y),y+f<T.minForce?f=T.minForce-y:y+f>T.maxForce&&(f=T.maxForce-y),b[A]+=f,p+=f>0?f:-f,T.addToWlambda(f)}if(p*p<i)break}for(let A=0;A!==l;A++){const T=a[A],C=T.velocity,S=T.angularVelocity;T.vlambda.vmul(T.linearFactor,T.vlambda),C.vadd(T.vlambda,C),T.wlambda.vmul(T.angularFactor,T.wlambda),S.vadd(T.wlambda,S)}let E=o.length;const z=1/d;for(;E--;)o[E].multiplier=b[E]*z}return s}}const nn=[],on=[],rn=[];_.STATIC;class cn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class an extends cn{constructor(){super(...arguments);this.type=c}constructObject(){return new c}}const V={sphereSphere:F.types.SPHERE,spherePlane:F.types.SPHERE|F.types.PLANE,boxBox:F.types.BOX|F.types.BOX,sphereBox:F.types.SPHERE|F.types.BOX,planeBox:F.types.PLANE|F.types.BOX,convexConvex:F.types.CONVEXPOLYHEDRON,sphereConvex:F.types.SPHERE|F.types.CONVEXPOLYHEDRON,planeConvex:F.types.PLANE|F.types.CONVEXPOLYHEDRON,boxConvex:F.types.BOX|F.types.CONVEXPOLYHEDRON,sphereHeightfield:F.types.SPHERE|F.types.HEIGHTFIELD,boxHeightfield:F.types.BOX|F.types.HEIGHTFIELD,convexHeightfield:F.types.CONVEXPOLYHEDRON|F.types.HEIGHTFIELD,sphereParticle:F.types.PARTICLE|F.types.SPHERE,planeParticle:F.types.PLANE|F.types.PARTICLE,boxParticle:F.types.BOX|F.types.PARTICLE,convexParticle:F.types.PARTICLE|F.types.CONVEXPOLYHEDRON,cylinderCylinder:F.types.CYLINDER,sphereCylinder:F.types.SPHERE|F.types.CYLINDER,planeCylinder:F.types.PLANE|F.types.CYLINDER,boxCylinder:F.types.BOX|F.types.CYLINDER,convexCylinder:F.types.CONVEXPOLYHEDRON|F.types.CYLINDER,heightfieldCylinder:F.types.HEIGHTFIELD|F.types.CYLINDER,particleCylinder:F.types.PARTICLE|F.types.CYLINDER,sphereTrimesh:F.types.SPHERE|F.types.TRIMESH,planeTrimesh:F.types.PLANE|F.types.TRIMESH};class ln{get[V.sphereSphere](){return this.sphereSphere}get[V.spherePlane](){return this.spherePlane}get[V.boxBox](){return this.boxBox}get[V.sphereBox](){return this.sphereBox}get[V.planeBox](){return this.planeBox}get[V.convexConvex](){return this.convexConvex}get[V.sphereConvex](){return this.sphereConvex}get[V.planeConvex](){return this.planeConvex}get[V.boxConvex](){return this.boxConvex}get[V.sphereHeightfield](){return this.sphereHeightfield}get[V.boxHeightfield](){return this.boxHeightfield}get[V.convexHeightfield](){return this.convexHeightfield}get[V.sphereParticle](){return this.sphereParticle}get[V.planeParticle](){return this.planeParticle}get[V.boxParticle](){return this.boxParticle}get[V.convexParticle](){return this.convexParticle}get[V.cylinderCylinder](){return this.convexConvex}get[V.sphereCylinder](){return this.sphereConvex}get[V.planeCylinder](){return this.planeConvex}get[V.boxCylinder](){return this.boxConvex}get[V.convexCylinder](){return this.convexConvex}get[V.heightfieldCylinder](){return this.heightfieldCylinder}get[V.particleCylinder](){return this.particleCylinder}get[V.sphereTrimesh](){return this.sphereTrimesh}get[V.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new an,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Gs(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,v=p.length?p.pop():new ye(s,n,h*f),y=p.length?p.pop():new ye(s,n,h*f);return v.bi=y.bi=s,v.bj=y.bj=n,v.minForce=y.minForce=-h*f,v.maxForce=y.maxForce=h*f,v.ri.copy(t.ri),v.rj.copy(t.rj),y.ri.copy(t.ri),y.rj.copy(t.rj),t.ni.tangents(v.t,y.t),v.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),y.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),v.enabled=y.enabled=t.enabled,e.push(v,y),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];lt.setZero(),dt.setZero(),ut.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(lt.vadd(e.ni,lt),dt.vadd(e.ri,dt),ut.vadd(e.rj,ut)):(lt.vsub(e.ni,lt),dt.vadd(e.rj,dt),ut.vadd(e.ri,ut));const o=1/t;dt.scale(o,s.ri),ut.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),lt.normalize(),lt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=un,l=pn,d=hn,u=dn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],v=e[h];let y=null;p.material&&v.material&&(y=s.getContactMaterial(p.material,v.material)||null);const w=p.type&_.KINEMATIC&&v.type&_.STATIC||p.type&_.STATIC&&v.type&_.KINEMATIC||p.type&_.KINEMATIC&&v.type&_.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],a),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const b=p.shapes[m];for(let E=0;E<v.shapes.length;E++){v.quaternion.mult(v.shapeOrientations[E],l),v.quaternion.vmult(v.shapeOffsets[E],u),u.vadd(v.position,u);const z=v.shapes[E];if(!(b.collisionFilterMask&z.collisionFilterGroup&&z.collisionFilterMask&b.collisionFilterGroup)||d.distanceTo(u)>b.boundingSphereRadius+z.boundingSphereRadius)continue;let A=null;b.material&&z.material&&(A=s.getContactMaterial(b.material,z.material)||null),this.currentContactMaterial=A||y||s.defaultContactMaterial;const T=b.type|z.type,C=this[T];if(C){let S=!1;b.type<z.type?S=C.call(this,b,z,d,u,a,l,p,v,b,z,w):S=C.call(this,z,b,u,d,l,a,v,p,b,z,w),S&&w&&(s.shapeOverlapKeeper.set(b.id,z.id),s.bodyOverlapKeeper.set(p.id,v.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,l,d,u){const h=this.createContactEquation(r,a,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Mt),h.ni.scale(h.ni.dot(Mt),xe),Mt.vsub(xe,h.rj),-Mt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(a.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}sphereBox(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool,f=On;s.vsub(n,Nt),e.getSideNormals(f,o);const p=t.radius;let v=!1;const y=Vn,w=Wn,m=Gn;let b=null,E=0,z=0,A=0,T=null;for(let g=0,L=f.length;g!==L&&v===!1;g++){const k=qn;k.copy(f[g]);const O=k.length();k.normalize();const U=Nt.dot(k);if(U<O+p&&U>0){const Y=Ln,q=kn;Y.copy(f[(g+1)%3]),q.copy(f[(g+2)%3]);const ht=Y.length(),gt=q.length();Y.normalize(),q.normalize();const Bt=Nt.dot(Y),Pt=Nt.dot(q);if(Bt<ht&&Bt>-ht&&Pt<gt&&Pt>-gt){const Yt=Math.abs(U-O-p);if((T===null||Yt<T)&&(T=Yt,z=Bt,A=Pt,b=O,y.copy(k),w.copy(Y),m.copy(q),E++,u))return!0}}}if(E){v=!0;const g=this.createContactEquation(r,a,t,e,l,d);y.scale(-p,g.ri),g.ni.copy(y),g.ni.negate(g.ni),y.scale(b,y),w.scale(z,w),y.vadd(w,y),m.scale(A,m),y.vadd(m,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),g.rj.vadd(n,g.rj),g.rj.vsub(a.position,g.rj),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}let C=h.get();const S=jn;for(let g=0;g!==2&&!v;g++)for(let L=0;L!==2&&!v;L++)for(let k=0;k!==2&&!v;k++)if(C.set(0,0,0),g?C.vadd(f[0],C):C.vsub(f[0],C),L?C.vadd(f[1],C):C.vsub(f[1],C),k?C.vadd(f[2],C):C.vsub(f[2],C),n.vadd(C,S),S.vsub(s,S),S.lengthSquared()<p*p){if(u)return!0;v=!0;const O=this.createContactEquation(r,a,t,e,l,d);O.ri.copy(S),O.ri.normalize(),O.ni.copy(O.ri),O.ri.scale(p,O.ri),O.rj.copy(C),O.ri.vadd(s,O.ri),O.ri.vsub(r.position,O.ri),O.rj.vadd(n,O.rj),O.rj.vsub(a.position,O.rj),this.result.push(O),this.createFrictionEquationsFromContact(O,this.frictionResult)}h.release(C),C=null;const B=h.get(),I=h.get(),P=h.get(),x=h.get(),N=h.get(),M=f.length;for(let g=0;g!==M&&!v;g++)for(let L=0;L!==M&&!v;L++)if(g%3!=L%3){f[L].cross(f[g],B),B.normalize(),f[g].vadd(f[L],I),P.copy(s),P.vsub(I,P),P.vsub(n,P);const k=P.dot(B);B.scale(k,x);let O=0;for(;O===g%3||O===L%3;)O++;N.copy(s),N.vsub(x,N),N.vsub(I,N),N.vsub(n,N);const U=Math.abs(k),Y=N.length();if(U<f[O].length()&&Y<p){if(u)return!0;v=!0;const q=this.createContactEquation(r,a,t,e,l,d);I.vadd(x,q.rj),q.rj.copy(q.rj),N.negate(q.ni),q.ni.normalize(),q.ri.copy(q.rj),q.ri.vadd(n,q.ri),q.ri.vsub(s,q.ri),q.ri.normalize(),q.ri.scale(p,q.ri),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(a.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}}h.release(B,I,P,x,N)}planeBox(t,e,s,n,i,o,r,a,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}convexConvex(t,e,s,n,i,o,r,a,l,d,u,h,f){const p=ii;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const v=[],y=oi;t.clipAgainstHull(s,i,e,n,o,p,-100,100,v);let w=0;for(let m=0;m!==v.length;m++){if(u)return!0;const b=this.createContactEquation(r,a,t,e,l,d),E=b.ri,z=b.rj;p.negate(b.ni),v[m].normal.negate(y),y.scale(v[m].depth,y),v[m].point.vadd(y,E),z.copy(v[m].point),E.vsub(s,E),z.vsub(n,z),E.vadd(s,E),E.vsub(r.position,E),z.vadd(n,z),z.vsub(a.position,z),this.result.push(b),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(b,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool;s.vsub(n,Hn);const f=e.faceNormals,p=e.faces,v=e.vertices,y=t.radius;let w=!1;for(let m=0;m!==v.length;m++){const b=v[m],E=Xn;o.vmult(b,E),n.vadd(E,E);const z=Un;if(E.vsub(s,z),z.lengthSquared()<y*y){if(u)return!0;w=!0;const A=this.createContactEquation(r,a,t,e,l,d);A.ri.copy(z),A.ri.normalize(),A.ni.copy(A.ri),A.ri.scale(y,A.ri),E.vsub(n,A.rj),A.ri.vadd(s,A.ri),A.ri.vsub(r.position,A.ri),A.rj.vadd(n,A.rj),A.rj.vsub(a.position,A.rj),this.result.push(A),this.createFrictionEquationsFromContact(A,this.frictionResult);return}}for(let m=0,b=p.length;m!==b&&w===!1;m++){const E=f[m],z=p[m],A=$n;o.vmult(E,A);const T=Kn;o.vmult(v[z[0]],T),T.vadd(n,T);const C=Zn;A.scale(-y,C),s.vadd(C,C);const S=Jn;C.vsub(T,S);const B=S.dot(A),I=Qn;if(s.vsub(T,I),B<0&&I.dot(A)>0){const P=[];for(let x=0,N=z.length;x!==N;x++){const M=h.get();o.vmult(v[z[x]],M),n.vadd(M,M),P.push(M)}if(Rn(P,A,s)){if(u)return!0;w=!0;const x=this.createContactEquation(r,a,t,e,l,d);A.scale(-y,x.ri),A.negate(x.ni);const N=h.get();A.scale(-B,N);const M=h.get();A.scale(-y,M),s.vsub(n,x.rj),x.rj.vadd(M,x.rj),x.rj.vadd(N,x.rj),x.rj.vadd(n,x.rj),x.rj.vsub(a.position,x.rj),x.ri.vadd(s,x.ri),x.ri.vsub(r.position,x.ri),h.release(N),h.release(M),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult);for(let g=0,L=P.length;g!==L;g++)h.release(P[g]);return}else for(let x=0;x!==z.length;x++){const N=h.get(),M=h.get();o.vmult(v[z[(x+1)%z.length]],N),o.vmult(v[z[(x+2)%z.length]],M),n.vadd(N,N),n.vadd(M,M);const g=Dn;M.vsub(N,g);const L=Yn;g.unit(L);const k=h.get(),O=h.get();s.vsub(N,O);const U=O.dot(L);L.scale(U,k),k.vadd(N,k);const Y=h.get();if(k.vsub(s,Y),U>0&&U*U<g.lengthSquared()&&Y.lengthSquared()<y*y){if(u)return!0;const q=this.createContactEquation(r,a,t,e,l,d);k.vsub(n,q.rj),k.vsub(s,q.ni),q.ni.normalize(),q.ni.scale(y,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(a.position,q.rj),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult);for(let ht=0,gt=P.length;ht!==gt;ht++)h.release(P[ht]);h.release(N),h.release(M),h.release(k),h.release(Y),h.release(O);return}h.release(N),h.release(M),h.release(k),h.release(Y),h.release(O)}for(let x=0,N=P.length;x!==N;x++)h.release(P[x])}}}planeConvex(t,e,s,n,i,o,r,a,l,d,u){const h=ti,f=ei;f.set(0,0,1),i.vmult(f,f);let p=0;const v=si;for(let y=0;y!==e.vertices.length;y++)if(h.copy(e.vertices[y]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,a,t,e,l,d),b=ni;f.scale(f.dot(v),b),h.vsub(b,b),b.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(a.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,f=t.radius,p=e.elementSize,v=yi,y=vi;j.pointToLocalFrame(n,o,s,y);let w=Math.floor((y.x-f)/p)-1,m=Math.ceil((y.x+f)/p)+1,b=Math.floor((y.y-f)/p)-1,E=Math.ceil((y.y+f)/p)+1;if(m<0||E<0||w>h.length||b>h[0].length)return;w<0&&(w=0),m<0&&(m=0),b<0&&(b=0),E<0&&(E=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),E>=h[0].length&&(E=h[0].length-1),b>=h[0].length&&(b=h[0].length-1);const z=[];e.getRectMinMax(w,b,m,E,z);const A=z[0],T=z[1];if(y.z-f>T||y.z+f<A)return;const C=this.result;for(let S=w;S<m;S++)for(let B=b;B<E;B++){const I=C.length;let P=!1;if(e.getConvexTrianglePillar(S,B,!1),j.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,a,t,e,u)),u&&P||(e.getConvexTrianglePillar(S,B,!0),j.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(P=this.sphereConvex(t,e.pillarConvex,s,v,i,o,r,a,t,e,u)),u&&P))return!0;if(C.length-I>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,v=fi,y=mi,w=pi;j.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,b=Math.ceil((w.x+p)/f)+1,E=Math.floor((w.y-p)/f)-1,z=Math.ceil((w.y+p)/f)+1;if(b<0||z<0||m>h.length||E>h[0].length)return;m<0&&(m=0),b<0&&(b=0),E<0&&(E=0),z<0&&(z=0),m>=h.length&&(m=h.length-1),b>=h.length&&(b=h.length-1),z>=h[0].length&&(z=h[0].length-1),E>=h[0].length&&(E=h[0].length-1);const A=[];e.getRectMinMax(m,E,b,z,A);const T=A[0],C=A[1];if(!(w.z-p>C||w.z+p<T))for(let S=m;S<b;S++)for(let B=E;B<z;B++){let I=!1;if(e.getConvexTrianglePillar(S,B,!1),j.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,a,null,null,u,y,null)),u&&I||(e.getConvexTrianglePillar(S,B,!0),j.pointToWorldFrame(n,o,e.pillarOffset,v),s.distanceTo(v)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,v,i,o,r,a,null,null,u,y,null)),u&&I))return!0}}sphereParticle(t,e,s,n,i,o,r,a,l,d,u){const h=li;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(a,r,e,t,l,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,l,d,u){const h=ri;h.set(0,0,1),r.quaternion.vmult(h,h);const f=ci;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const v=this.createContactEquation(a,r,e,t,l,d);v.ni.copy(h),v.ni.negate(v.ni),v.ri.set(0,0,0);const y=ai;h.scale(h.dot(n),y),n.vsub(y,y),v.rj.copy(y),this.result.push(v),this.createFrictionEquationsFromContact(v,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexParticle(t,e,s,n,i,o,r,a,l,d,u){let h=-1;const f=di,p=ui;let v=null;const y=hi;if(y.copy(n),y.vsub(s,y),i.conjugate(ge),ge.vmult(y,y),t.pointIsInside(y)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const b=[t.worldVertices[t.faces[w][0]]],E=t.worldFaceNormals[w];n.vsub(b[0],be);const z=-E.dot(be);if(v===null||Math.abs(z)<Math.abs(v)){if(u)return!0;v=z,h=w,f.copy(E)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,l,d);f.scale(v,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,b=w.rj;m.vadd(n,m),m.vsub(a.position,m),b.vadd(s,b),b.vsub(r.position,b),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,a,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexParticle(e,t,n,s,o,i,a,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=bn,f=En,p=Cn,v=zn,y=Sn,w=An,m=Pn,b=gn,E=wn,z=In;j.pointToLocalFrame(n,o,s,y);const A=t.radius;m.lowerBound.set(y.x-A,y.y-A,y.z-A),m.upperBound.set(y.x+A,y.y+A,y.z+A),e.getTrianglesInAABB(m,z);const T=xn,C=t.radius*t.radius;for(let x=0;x<z.length;x++)for(let N=0;N<3;N++)if(e.getVertex(e.indices[z[x]*3+N],T),T.vsub(y,E),E.lengthSquared()<=C){if(b.copy(T),j.pointToWorldFrame(n,o,b,T),T.vsub(s,E),u)return!0;let M=this.createContactEquation(r,a,t,e,l,d);M.ni.copy(E),M.ni.normalize(),M.ri.copy(M.ni),M.ri.scale(t.radius,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.copy(T),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}for(let x=0;x<z.length;x++)for(let N=0;N<3;N++){e.getVertex(e.indices[z[x]*3+N],h),e.getVertex(e.indices[z[x]*3+(N+1)%3],f),f.vsub(h,p),y.vsub(f,w);const M=w.dot(p);y.vsub(h,w);let g=w.dot(p);if(g>0&&M<0&&(y.vsub(h,w),v.copy(p),v.normalize(),g=w.dot(v),v.scale(g,w),w.vadd(h,w),w.distanceTo(y)<t.radius)){if(u)return!0;const k=this.createContactEquation(r,a,t,e,l,d);w.vsub(y,k.ni),k.ni.normalize(),k.ni.scale(t.radius,k.ri),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(a.position,k.rj),j.vectorToWorldFrame(o,k.ni,k.ni),j.vectorToWorldFrame(o,k.ri,k.ri),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}}const S=Mn,B=Nn,I=Bn,P=yn;for(let x=0,N=z.length;x!==N;x++){e.getTriangleVertices(z[x],S,B,I),e.getNormal(z[x],P),y.vsub(S,w);let M=w.dot(P);if(P.scale(M,w),y.vsub(w,w),M=w.distanceTo(y),H.pointInTriangle(w,S,B,I)&&M<t.radius){if(u)return!0;let g=this.createContactEquation(r,a,t,e,l,d);w.vsub(y,g.ni),g.ni.normalize(),g.ni.scale(t.radius,g.ri),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),j.pointToWorldFrame(n,o,w,w),w.vsub(a.position,g.rj),j.vectorToWorldFrame(o,g.ni,g.ni),j.vectorToWorldFrame(o,g.ri,g.ri),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}}z.length=0}planeTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=new c,f=fn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const v=new c;v.copy(h),j.pointToWorldFrame(n,o,v,h);const y=mn;if(h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,a,t,e,l,d);m.ni.copy(f);const b=vn;f.scale(y.dot(f),b),h.vsub(b,b),m.ri.copy(b),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(a.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const lt=new c,dt=new c,ut=new c,hn=new c,dn=new c,un=new G,pn=new G,fn=new c,mn=new c,vn=new c,yn=new c,wn=new c;new c;const xn=new c,gn=new c,bn=new c,En=new c,Cn=new c,zn=new c,Sn=new c,An=new c,Mn=new c,Nn=new c,Bn=new c,Pn=new $,In=[],Mt=new c,xe=new c,Fn=new c,Tn=new c,_n=new c;function Rn(R,t,e){let s=null;const n=R.length;for(let i=0;i!==n;i++){const o=R[i],r=Fn;R[(i+1)%n].vsub(o,r);const a=Tn;r.cross(t,a);const l=_n;e.vsub(o,l);const d=a.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Nt=new c,qn=new c,Ln=new c,kn=new c,On=[new c,new c,new c,new c,new c,new c],jn=new c,Vn=new c,Wn=new c,Gn=new c,Hn=new c,Dn=new c,Yn=new c,Un=new c,Xn=new c,$n=new c,Kn=new c,Zn=new c,Jn=new c,Qn=new c;new c;new c;const ti=new c,ei=new c,si=new c,ni=new c,ii=new c,oi=new c,ri=new c,ci=new c,ai=new c,li=new c,ge=new G,hi=new c;new c;const di=new c,be=new c,ui=new c,pi=new c,fi=new c,mi=[0],vi=new c,yi=new c;class Ee{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let l=!1;const d=s[a];for(;d>n[r];)r++;l=d===n[r],l||Ce(t,d)}r=0;for(let a=0;a<o;a++){let l=!1;const d=n[a];for(;d>s[r];)r++;l=s[r]===d,l||Ce(e,d)}}}function Ce(R,t){R.push((t&4294901760)>>16,t&65535)}const Ht=(R,t)=>R<t?`${R}-${t}`:`${t}-${R}`;class wi{constructor(){this.data={keys:[]}}get(t,e){const s=Ht(t,e);return this.data[s]}set(t,e,s){const n=Ht(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Ht(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class xi extends te{constructor(t){t===void 0&&(t={});super();this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new zs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new sn,this.constraints=[],this.narrowphase=new ln(this),this.collisionMatrix=new Qt,this.collisionMatrixPrevious=new Qt,this.bodyOverlapKeeper=new Ee,this.shapeOverlapKeeper=new Ee,this.contactmaterials=[],this.contactMaterialTable=new wi,this.defaultMaterial=new vt("default"),this.defaultContactMaterial=new At(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Et?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=n,Dt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=n,Dt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=n,Dt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof _&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=D.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=D.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(D.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=zi,n=Si,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,d=this.profile,u=_.DYNAMIC;let h=-1/0;const f=this.constraints,p=Ci;a.length();const v=a.x,y=a.y,w=a.z;let m=0;for(l&&(h=D.now()),m=0;m!==i;m++){const x=o[m];if(x.type===u){const N=x.force,M=x.mass;N.x+=M*v,N.y+=M*y,N.z+=M*w}}for(let x=0,N=this.subsystems.length;x!==N;x++)this.subsystems[x].update();l&&(h=D.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=D.now()-h);let b=f.length;for(m=0;m!==b;m++){const x=f[m];if(!x.collideConnected)for(let N=s.length-1;N>=0;N-=1)(x.bodyA===s[N]&&x.bodyB===n[N]||x.bodyB===s[N]&&x.bodyA===n[N])&&(s.splice(N,1),n.splice(N,1))}this.collisionMatrixTick(),l&&(h=D.now());const E=Ei,z=e.length;for(m=0;m!==z;m++)E.push(e[m]);e.length=0;const A=this.frictionEquations.length;for(m=0;m!==A;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,E,this.frictionEquations,p),l&&(d.narrowphase=D.now()-h),l&&(h=D.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const T=e.length;for(let x=0;x!==T;x++){const N=e[x],M=N.bi,g=N.bj,L=N.si,k=N.sj;let O;if(M.material&&g.material?O=this.getContactMaterial(M.material,g.material)||this.defaultContactMaterial:O=this.defaultContactMaterial,O.friction,M.material&&g.material&&(M.material.friction>=0&&g.material.friction>=0&&M.material.friction*g.material.friction,M.material.restitution>=0&&g.material.restitution>=0&&(N.restitution=M.material.restitution*g.material.restitution)),r.addEquation(N),M.allowSleep&&M.type===_.DYNAMIC&&M.sleepState===_.SLEEPING&&g.sleepState===_.AWAKE&&g.type!==_.STATIC){const U=g.velocity.lengthSquared()+g.angularVelocity.lengthSquared(),Y=g.sleepSpeedLimit**2;U>=Y*2&&(M.wakeUpAfterNarrowphase=!0)}if(g.allowSleep&&g.type===_.DYNAMIC&&g.sleepState===_.SLEEPING&&M.sleepState===_.AWAKE&&M.type!==_.STATIC){const U=M.velocity.lengthSquared()+M.angularVelocity.lengthSquared(),Y=M.sleepSpeedLimit**2;U>=Y*2&&(g.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(M,g,!0),this.collisionMatrixPrevious.get(M,g)||(yt.body=g,yt.contact=N,M.dispatchEvent(yt),yt.body=M,g.dispatchEvent(yt)),this.bodyOverlapKeeper.set(M.id,g.id),this.shapeOverlapKeeper.set(L.id,k.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=D.now()-h,h=D.now()),m=0;m!==i;m++){const x=o[m];x.wakeUpAfterNarrowphase&&(x.wakeUp(),x.wakeUpAfterNarrowphase=!1)}for(b=f.length,m=0;m!==b;m++){const x=f[m];x.update();for(let N=0,M=x.equations.length;N!==M;N++){const g=x.equations[N];r.addEquation(g)}}r.solve(t,this),l&&(d.solve=D.now()-h),r.removeAllEquations();const C=Math.pow;for(m=0;m!==i;m++){const x=o[m];if(x.type&u){const N=C(1-x.linearDamping,t),M=x.velocity;M.scale(N,M);const g=x.angularVelocity;if(g){const L=C(1-x.angularDamping,t);g.scale(L,g)}}}this.dispatchEvent(bi),l&&(h=D.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)==0,I=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,B,I);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=D.now()-h),this.stepnumber+=1,this.dispatchEvent(gi);let P=!0;if(this.allowSleep)for(P=!1,m=0;m!==i;m++){const x=o[m];x.sleepTick(this.time),x.sleepState!==_.SLEEPING&&(P=!0)}this.hasActiveBodies=P}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(nt,it),t){for(let i=0,o=nt.length;i<o;i+=2)wt.bodyA=this.getBodyById(nt[i]),wt.bodyB=this.getBodyById(nt[i+1]),this.dispatchEvent(wt);wt.bodyA=wt.bodyB=null}if(e){for(let i=0,o=it.length;i<o;i+=2)xt.bodyA=this.getBodyById(it[i]),xt.bodyB=this.getBodyById(it[i+1]),this.dispatchEvent(xt);xt.bodyA=xt.bodyB=null}nt.length=it.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(nt,it),s){for(let i=0,o=nt.length;i<o;i+=2){const r=this.getShapeById(nt[i]),a=this.getShapeById(nt[i+1]);ot.shapeA=r,ot.shapeB=a,r&&(ot.bodyA=r.body),a&&(ot.bodyB=a.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}if(n){for(let i=0,o=it.length;i<o;i+=2){const r=this.getShapeById(it[i]),a=this.getShapeById(it[i+1]);rt.shapeA=r,rt.shapeB=a,r&&(rt.bodyA=r.body),a&&(rt.bodyB=a.body),this.dispatchEvent(rt)}rt.bodyA=rt.bodyB=rt.shapeA=rt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new $;const Dt=new H,D=globalThis.performance||{};if(!D.now){let R=Date.now();D.timing&&D.timing.navigationStart&&(R=D.timing.navigationStart),D.now=()=>Date.now()-R}new c;const gi={type:"postStep"},bi={type:"preStep"},yt={type:_.COLLIDE_EVENT_NAME,body:null,contact:null},Ei=[],Ci=[],zi=[],Si=[],nt=[],it=[],wt={type:"beginContact",bodyA:null,bodyB:null},xt={type:"endContact",bodyA:null,bodyB:null},ot={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},rt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};function Ai(R,t,e){let{color:s=65280,scale:n=1,onInit:i,onUpdate:o}=e===void 0?{}:e;const r=[],a=new Ae({color:s!=null?s:65280,wireframe:!0}),l=new c,d=new c,u=new c,h=new G,f=new It(1),p=new Ft(1,1,1),v=new Tt(10,10,10,10);v.translate(0,0,1e-4);function y(C){const S=new _t,B=[];for(let P=0;P<C.vertices.length;P++){const x=C.vertices[P];B.push(x.x,x.y,x.z)}S.setAttribute("position",new Rt(B,3));const I=[];for(let P=0;P<C.faces.length;P++){const x=C.faces[P],N=x[0];for(let M=1;M<x.length-1;M++){const g=x[M],L=x[M+1];I.push(N,g,L)}}return S.setIndex(I),S.computeBoundingSphere(),S.computeVertexNormals(),S}function w(C){const S=new _t,B=[],I=l,P=d,x=u;for(let N=0;N<C.indices.length/3;N++)C.getTriangleVertices(N,I,P,x),B.push(I.x,I.y,I.z),B.push(P.x,P.y,P.z),B.push(x.x,x.y,x.z);return S.setAttribute("position",new Rt(B,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function m(C){const S=new _t,B=C.elementSize||1,I=C.data.flatMap((x,N)=>x.flatMap((M,g)=>[N*B,g*B,M])),P=[];for(let x=0;x<C.data.length-1;x++)for(let N=0;N<C.data[x].length-1;N++){const M=C.data[x].length,g=x*M+N;P.push(g+1,g+M,g+M+1),P.push(g+M,g+1,g)}return S.setIndex(P),S.setAttribute("position",new Rt(I,3)),S.computeBoundingSphere(),S.computeVertexNormals(),S}function b(C){let S=new K;const{SPHERE:B,BOX:I,PLANE:P,CYLINDER:x,CONVEXPOLYHEDRON:N,TRIMESH:M,HEIGHTFIELD:g}=F.types;switch(C.type){case B:{S=new K(f,a);break}case I:{S=new K(p,a);break}case P:{S=new K(v,a);break}case x:{const L=new Me(C.radiusTop,C.radiusBottom,C.height,C.numSegments);S=new K(L,a),C.geometryId=L.id;break}case N:{const L=y(C);S=new K(L,a),C.geometryId=L.id;break}case M:{const L=w(C);S=new K(L,a),C.geometryId=L.id;break}case g:{const L=m(C);S=new K(L,a),C.geometryId=L.id;break}}return R.add(S),S}function E(C,S){const{SPHERE:B,BOX:I,PLANE:P,CYLINDER:x,CONVEXPOLYHEDRON:N,TRIMESH:M,HEIGHTFIELD:g}=F.types;switch(S.type){case B:{const{radius:L}=S;C.scale.set(L*n,L*n,L*n);break}case I:{C.scale.copy(S.halfExtents),C.scale.multiplyScalar(2*n);break}case P:break;case x:{C.scale.set(1*n,1*n,1*n);break}case N:{C.scale.set(1*n,1*n,1*n);break}case M:{C.scale.copy(S.scale).multiplyScalar(n);break}case g:{C.scale.set(1*n,1*n,1*n);break}}}function z(C,S){if(!C)return!1;const{geometry:B}=C;return B instanceof It&&S.type===F.types.SPHERE||B instanceof Ft&&S.type===F.types.BOX||B instanceof Tt&&S.type===F.types.PLANE||B.id===S.geometryId&&S.type===F.types.CYLINDER||B.id===S.geometryId&&S.type===F.types.CONVEXPOLYHEDRON||B.id===S.geometryId&&S.type===F.types.TRIMESH||B.id===S.geometryId&&S.type===F.types.HEIGHTFIELD}function A(C,S){let B=r[C],I=!1;return z(B,S)||(B&&R.remove(B),r[C]=B=b(S),I=!0),E(B,S),I}function T(){const C=r,S=l,B=h;let I=0;for(const P of t.bodies)for(let x=0;x!==P.shapes.length;x++){const N=P.shapes[x],M=A(I,N),g=C[I];g&&(P.quaternion.vmult(P.shapeOffsets[x],S),P.position.vadd(S,S),P.quaternion.mult(P.shapeOrientations[x],B),g.position.copy(S),g.quaternion.copy(B),M&&i instanceof Function&&i(P,g,N),!M&&o instanceof Function&&o(P,g,N)),I++}for(let P=I;P<C.length;P++){const x=C[P];x&&R.remove(x)}C.length=I}return{update:T}}class Mi extends Ne{constructor(t,e){super();W(this,"enabled");W(this,"cannonBody");W(this,"velocityFactor");W(this,"jumpVelocity");W(this,"pitchObject");W(this,"yawObject");W(this,"quaternion");W(this,"moveForward");W(this,"moveBackward");W(this,"moveLeft");W(this,"moveRight");W(this,"canJump");W(this,"velocity");W(this,"inputVelocity");W(this,"euler");W(this,"lockEvent");W(this,"unlockEvent");W(this,"isLocked");W(this,"onPointerlockChange",()=>{document.pointerLockElement?(this.dispatchEvent(this.lockEvent),this.isLocked=!0):(this.dispatchEvent(this.unlockEvent),this.isLocked=!1)});W(this,"onPointerlockError",()=>{console.error("PointerLockControlsCannon: Unable to use Pointer Lock API")});W(this,"onMouseMove",t=>{if(!this.enabled)return;const{movementX:e,movementY:s}=t;this.yawObject.rotation.y-=e*.002,this.pitchObject.rotation.x-=s*.002,this.pitchObject.rotation.x=Math.max(-Math.PI/2,Math.min(Math.PI/2,this.pitchObject.rotation.x))});W(this,"onKeyDown",t=>{switch(t.code){case"KeyW":case"ArrowUp":this.moveForward=!0;break;case"KeyA":case"ArrowLeft":this.moveLeft=!0;break;case"KeyS":case"ArrowDown":this.moveBackward=!0;break;case"KeyD":case"ArrowRight":this.moveRight=!0;break;case"Space":this.canJump&&(this.velocity.y=this.jumpVelocity),this.canJump=!1;break}});W(this,"onKeyUp",t=>{switch(t.code){case"KeyW":case"ArrowUp":this.moveForward=!1;break;case"KeyA":case"ArrowLeft":this.moveLeft=!1;break;case"KeyS":case"ArrowDown":this.moveBackward=!1;break;case"KeyD":case"ArrowRight":this.moveRight=!1;break}});this.enabled=!1,this.cannonBody=e;const s=2;this.velocityFactor=.3,this.jumpVelocity=20,this.pitchObject=new Ut,this.pitchObject.add(t),this.yawObject=new Ut,this.yawObject.position.y=s,this.yawObject.add(this.pitchObject),this.quaternion=new Be,this.moveForward=!1,this.moveBackward=!1,this.moveLeft=!1,this.moveRight=!1,this.canJump=!1;const n=new c,i=new c(0,1,0);this.cannonBody.addEventListener("collide",o=>{const{contact:r}=o;r.bi.id===this.cannonBody.id?r.ni.negate(n):n.copy(r.ni),n.dot(i)>.5&&(this.canJump=!0)}),this.velocity=this.cannonBody.velocity,this.inputVelocity=new Pe,this.euler=new Ie,this.lockEvent={type:"lock"},this.unlockEvent={type:"unlock"},this.connect()}connect(){document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("pointerlockchange",this.onPointerlockChange),document.addEventListener("pointerlockerror",this.onPointerlockError),document.addEventListener("keydown",this.onKeyDown),document.addEventListener("keyup",this.onKeyUp)}disconnect(){document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("pointerlockchange",this.onPointerlockChange),document.removeEventListener("pointerlockerror",this.onPointerlockError),document.removeEventListener("keydown",this.onKeyDown),document.removeEventListener("keyup",this.onKeyUp)}dispose(){this.disconnect()}lock(){document.body.requestPointerLock()}unlock(){document.exitPointerLock()}getObject(){return this.yawObject}getDirection(){const t=new c(0,0,-1);return t.applyQuaternion(this.quaternion),t}update(t){this.enabled!==!1&&(t*=1e3,t*=.1,this.inputVelocity.set(0,0,0),this.moveForward&&(this.inputVelocity.z=-this.velocityFactor*t),this.moveBackward&&(this.inputVelocity.z=this.velocityFactor*t),this.moveLeft&&(this.inputVelocity.x=-this.velocityFactor*t),this.moveRight&&(this.inputVelocity.x=this.velocityFactor*t),this.euler.x=this.pitchObject.rotation.x,this.euler.y=this.yawObject.rotation.y,this.euler.order="XYZ",this.quaternion.setFromEuler(this.euler),this.inputVelocity.applyQuaternion(this.quaternion),this.velocity.x+=this.inputVelocity.x,this.velocity.z+=this.inputVelocity.z,this.yawObject.position.copy(this.cannonBody.position))}}const Ni={class:"w-full h-full bg-[#39393c3a] relative"},Bi=1/60,_i=We({__name:"index",setup(R){const t=Xt(null),e=Xt(null),s=new Fe,n=new Ve;document.body.appendChild(n.dom);let i;const o=new Te({antialias:!0,logarithmicDepthBuffer:!1});o.shadowMap.enabled=!0,o.shadowMap.type=_e;const r=new Re(16777215,.2),a=new qe(16777215,200,50,Math.PI/4,0);a.position.set(0,20,0),a.castShadow=!0,a.shadow.mapSize.width=2048,a.shadow.mapSize.height=2048,a.shadow.camera.near=10,a.shadow.camera.far=100;const l=new Le(a);s.add(r,a,l);const d=new Tt(1e3,1e3,32,32),u=new qt({color:14013909,side:ke}),h=new K(d,u);h.receiveShadow=!0,h.rotateX(Math.PI/2),s.add(h);const f=new K(new Ft(2,2,2),new qt({color:16711680}));f.castShadow=!0;const p=new K(new It(1,16,16),new qt({color:65280}));p.castShadow=!0,s.add(p,f);const v=new xi({gravity:new c(0,-9.82,0)}),y=new _({type:_.STATIC,shape:new tn});y.quaternion.setFromEuler(-Math.PI/2,0,0),v.addBody(y);const w=new _({mass:5,shape:new we(1)});w.position.set(0,10,0);const m=new _({mass:7,shape:new bt(new c(1,1,1))});m.position.set(1,15,1),v.addBody(w),v.addBody(m);let b=performance.now();const E=new we(1.3),z=new _({mass:40,material:new vt("physics")});z.addShape(E),z.position.set(10,5,10),z.linearDamping=.9,v.addBody(z);let A;function T(I){A=new Mi(I,z),s.add(A.getObject()),A.addEventListener("lock",()=>{A.enabled=!0,console.log(A.enabled,"fps_controls.enabled"),t.value.classList.add("hidden")}),A.addEventListener("unlock",()=>{A.enabled=!1,t.value.classList.remove("hidden")})}new Ai(s,v,{}),Ge(async()=>{if(s.background=new Oe("black"),e.value){const{width:I,height:P}=e.value.getBoundingClientRect();i=new je(75,I/P,.1,1e6),o.setPixelRatio(window.devicePixelRatio),o.setSize(I,P),e.value.appendChild(o.domElement)}T(i),S()}),He(()=>{e.value.removeChild(o.domElement),document.body.removeChild(n.dom)});function C(I,P){o.render(I,P)}function S(){if(p.position.copy(w.position),p.quaternion.copy(w.quaternion),f.position.copy(m.position),f.quaternion.copy(m.quaternion),requestAnimationFrame(S),A.enabled){const I=performance.now()/1e3,P=I-b;b=I,v.step(Bi,P),A.update(P)}C(s,i),n.update()}function B(){A.lock()}return(I,P)=>{const x=Xe("n-button");return $e(),De("div",Ni,[$t("div",{ref_key:"menu",ref:t,class:"w-full h-full absolute flex justify-center items-center top-0 right-0 bg-[#000000bf]"},[Ye(x,{type:"primary",onClick:B},{default:Ue(()=>[Ke("Click to play")]),_:1})],512),$t("div",{ref_key:"el",ref:e,class:"w-full h-full"},null,512)])}}});export{_i as default};
